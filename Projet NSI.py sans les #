from ursina import *

class Player(Entity):
    def __init__(self, **kwargs):
        super().__init__()
        self.model = 'cube'
        self.color = color.orange
        self.speed = 5
        self.rotation_speed = 100
        self.camera_offset = Vec3(0, 5, -15)  # Fixed camera offset
        self.jump_height = 20  # Higher jump height
        self.gravity = 0.4  # Reduced gravity to allow for higher jumps
        self.velocity_y = 0
        self.grounded = False

        for key, value in kwargs.items():
            setattr(self, key, value)

    def update(self):
        # Movement: Forward and backward
        if held_keys['w']:
            self.position += self.forward * time.dt * self.speed
        if held_keys['s']:
            self.position -= self.forward * time.dt * self.speed

        # Rotation: Left and right
        if held_keys['a']:
            self.rotation_y += self.rotation_speed * time.dt
        if held_keys['d']:
            self.rotation_y -= self.rotation_speed * time.dt

        # Gravity and jumping
        ray = raycast(self.position, self.down, distance=0.1, ignore=(self,))
        if ray.hit:
            self.grounded = True
            self.velocity_y = 0  # Stop falling
            if held_keys['space']:
                self.velocity_y = self.jump_height  # Jump
        else:
            self.grounded = False
            self.velocity_y -= self.gravity  # Apply gravity

        # Apply vertical movement
        self.y += self.velocity_y * time.dt

        # Update the camera position to follow the player from above and behind without flipping
        camera.position = self.position + self.camera_offset
        camera.look_at(self.position + Vec3(0, 2, 0))  # Look at a point slightly above the player


app = Ursina()

# Create the player
player = Player(collider='box')

# Ground and platforms
ground = Entity(model='plane', scale=50, color=color.white, collider='box', texture='white_cube')

platform1 = Entity(model='cube', scale=(5, 1, 5), color=color.gray, position=(5, 1, 5), collider='box')
platform2 = Entity(model='cube', scale=(5, 1, 5), color=color.gray, position=(-5, 3, -5), collider='box')
platform3 = Entity(model='cube', scale=(5, 1, 5), color=color.gray, position=(0, 5, 0), collider='box')

# Walls around the scene to prevent the player from leaving
wall1 = Entity(model='cube', scale=(1, 10, 50), color=color.blue, position=(25, 5, 0), collider='box')
wall2 = Entity(model='cube', scale=(1, 10, 50), color=color.blue, position=(-25, 5, 0), collider='box')
wall3 = Entity(model='cube', scale=(50, 10, 1), color=color.blue, position=(0, 5, 25), collider='box')
wall4 = Entity(model='cube', scale=(50, 10, 1), color=color.blue, position=(0, 5, -25), collider='box')

app.run()
